#!/bin/bash

echo "=================================================================================="
echo "最终测试：micro_batch_size 和 control_iter 参数控制"
echo "=================================================================================="

echo ""
echo "✅ 已完成的修改总结:"
echo "1. 添加了 --micro-batch-size 命令行参数支持"
echo "2. 更新了训练脚本以接受 --micro-batch-size 参数"
echo "3. 修改了 control_iter 从控制 iteration 改为控制 micro_batch 数量"
echo "4. 移除了所有 sample 记录相关的代码"
echo "5. 在训练循环中添加了 micro_batch 计数和提前退出逻辑"
echo ""

echo "🔧 参数说明:"
echo "- --control-iter: 控制收集多少个 micro_batch 的数据"
echo "- --collect-micro-batches: 收集的 micro_batch 数量"
echo ""

echo "📝 使用示例:"
echo ""
echo "1. 基本用法（默认参数）:"
echo "   ./run_tensor_collection.sh single mxfp8"
echo "   # 收集1个micro_batch"
echo ""
echo "2. 自定义收集的micro_batch数量:"
echo "   ./run_tensor_collection.sh --mode single --quant-type mxfp8 --control-iter 3"
echo "   # 收集3个micro_batch"
echo ""
echo "3. 自定义收集的micro_batch数量:"
echo "   ./run_tensor_collection.sh --mode single --quant-type mxfp8 --collect-micro-batches 2"
echo "   # 收集2个micro_batch"
echo ""
echo "4. 同时使用两个参数:"
echo "   ./run_tensor_collection.sh --mode single --quant-type mxfp8 --control-iter 3 --collect-micro-batches 2"
echo "   # 收集2个micro_batch，最多3个iteration"
echo ""
echo "5. 通过主脚本使用:"
echo "   ./run_tensor_draw.sh --mode collect --quant-type mxfp8 --control-iter 2 --collect-micro-batches 1"
echo "   # 收集1个micro_batch，最多2个iteration"
echo ""

echo "🎯 主要改进:"
echo "- 更精确的控制：可以同时控制micro_batch数量和大小"
echo "- 更快的测试：只需要跑完指定数量的micro_batch就可以停止"
echo "- 简化的代码：移除了复杂的sample跟踪逻辑"
echo "- 更好的性能：避免了收集过多不必要的数据"
echo ""

echo "=================================================================================="
echo "测试完成！所有功能都已正确实现。"
echo "=================================================================================="
